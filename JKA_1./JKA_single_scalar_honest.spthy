theory JuliaKA

/**********************************************************
    Julia key agreement with single scalar multiplication

Assumption:
 >  communication parties are Honest
************************************************************/

begin

builtins:
     hashing, diffie-hellman, bilinear-pairing, multiset, symmetric-encryption

// Public key infrastructure
rule Generate_key:
  let pkA  = 'g'^~s1
  in
  [ Fr( ~s1 ) ]
--[ Init($P1), Honest($P1) ]->
  [ !Ltk( $P1, ~s1 ), !Pk( $P1, pkA ), Out( pkA ) ]

// Reveal of static secret key
rule Reveal_ltk:
  [ !Ltk( $P1, ~ea) ]
--[ RevealLtk($P1) ]->
  [ Out( ~ea) ]

//Prehandshake by generating ephemeral secrects by P1 and send to P2
rule Prehandshake_P1_P2:
  let
      pkS1 = 'g'^~s1
      EphK1 = pmult('g', ~eph1)
      sid = <$P1, $P2, EphK1, 'P1'>
      h1  = h(<'h1', EphK1>)
      t1 = h(<'t1', EphK1>)
  in
  [ !Ltk( $P1, ~s1 )
   , Fr(~eph1)]
--[
        Honest($P1)
      , Honest($P2)
      , Running($P1, $P2, <'P1','P2',<'h1', h1>>)
      , Commit($P1, $P2, <'P2','P1',<'h1', h1>>)
      , StaticSecret($P1, ~s1)
      , EphSecret($P1, ~eph1)
      , SessionHash(sid, h1 )
  ]->
  [
      !Ephk( $P1, ~eph1 )
     , Out(pkS1)
     , !Pk( $P1, pkS1 )
     , P1_prehandshake(<$P1, ~s1, pkS1, ~eph1, EphK1, h1, t1>)
    ]

//Prehandshake by generating ephemeral secrects by P2 after receiving pre-handshake message from P1
rule Prehandshake_P2_P1:
  let
    pkS2 = 'g'^~s2
    EphK2 = pmult('g', ~eph2)
    sid = <$P2, $P1, EphK2, 'P2'>
    h1 = h('h1', EphK1)
    t2  = h('t2', EphK2)
    t = t1^t2
    PC2 = pmult(t2, pkS1)
  in
  [
      Fr(~eph2)
      , Fr(~s2)
      , P1_prehandshake(<$P1, ~s1, pkS1, ~eph1, EphK1, h1, t1>)
    ]
--[
       Honest($P1)
      , Honest($P2)
      , Commit( $P1, $P, <'P2','P1',<'h1', h1>>)
      , Init($P2)
      , StaticSecret($P2, ~s2)
      , EphSecret($P2, ~eph2)
      , SessionHash(sid, h1 )
      , SessionHash1(sid, t2 )

      ]->
  [  P1_P2_prehandshake(<$P1, $P2, ~s2, ~s1, pkS2, ~eph2, ~eph1, EphK1, EphK2, h1, t1, t2>)
    ]

// Reveal of Ephemeral secrect key
rule Ephemeral_Reveal:
  [ !Ephk( $P, ~x ) ]
--[ RevealEphk( $P ) ]->
  [ Out( ~x ) ]
/******************************************************/
/*              Phase 3: Handshake                */
/******************************************************/

//Followed the same steps as given in the paper for the handshake phase for P1.
rule HandshakeP1_P2:
  let
     t = t1^t2
     t_sq = t^t
     static = ~s1^~s2
     t_sq_static = t_sq^static
     d1 = pmult(t_sq_static, 'g')
     t_s1 = t^~s1
     t_s1_e2 = t_s1^~eph2
     d2 = pmult(t_s1_e2, 'g')
     t_e1 =t^~eph1
     t_e1_s2 = t_e1^~s2
     d3 = pmult(t_e1^~s2, 'g')
     e1_e2 = ~eph1^~eph2
     d4 = pmult(e1_e2, 'g')
     D = <d1, d2, d3, d4>
     hsid = <$P1, $P2, 'P1'>
     PC1 = pmult(t1, pkS2)
     msg= senc('app1', D)
  in
  [
    P1_P2_prehandshake(<$P1, $P2, ~s2, ~s1, pkS2, ~eph2, ~eph1, EphK1, EphK2, h1, t1, t2>)
    ]
  --[  Honest($P1)
      , Honest($P2)
      , Julia_Secrect(hsid, D)
      , JuliaSecrect(D)
      , SessionHash1(hsid, t2 )
      , Running($P1, $P2, <'P2','P1',<'D', D>>)
  ]->
  [ P2_P1_handshake(<$P1, $P2, ~s2, ~s1, pkS2, ~eph2, ~eph1, EphK1, EphK2, h1, t1, t2>)
    , Out(msg)
    ]


//Followed the same steps as given in the paper for the handshake phase for P2.
rule HandshakeP2_P1:
  let
     t = t1^t2
     t_sq = t^t
     static = ~s1^~s2
     t_sq_static = t_sq^static
     d1 = pmult(t_sq_static, 'g')
     t_s1 = t^~s1
     t_s1_e2 = t_s1^~eph2
     d2 = pmult(t_s1_e2, 'g')
     t_e1 =t^~eph1
     t_e1_s2 = t_e1^~s2
     d3 = pmult(t_e1^~s2, 'g')
     e1_e2 = ~eph1^~eph2
     d4 = pmult(e1_e2, 'g')
     D = <d1, d2, d3, d4>
     hsid = <$P1, $P2, 'P2'>
     msg = sdec(msg, D)
  in
  [ P2_P1_handshake(<$P1, $P2, ~s2, ~s1, pkS2, ~eph2, ~eph1, EphK1, EphK2, h1, t1, t2>)
  , In(msg)
   ]

--[
   SessionHash1(hsid, t2 )
   , Julia_Secrect(hsid, D)
   , JuliaSecrect(D)
   , Honest($P1)
   , Honest($P2)
   , Commit($P2, $P1,<'P2','P1',<'D', D>>)
]->
[]

/***************************************/
/*         Executability Lemmas        */
/***************************************/

lemma JKA_executable_julia:
  exists-trace
  " Ex #j4 #j3 P1 P2 d.
    Julia_Secrect( <P2,P1,'P1'>, d ) @ j4
    & Julia_Secrect( <P2,P1,'P2'>, d ) @ j3
    & j4 < j3
    "

/************************************/
/*         Agreement Lemmas         */
/************************************/

/* Injective agreement between P1 and P2.*/

lemma injectiveagreement_P1_P2:
  " All a b r #i. Commit(a,b,<'P1','P2',<'D',r>>)@i
      & not (Ex #c. RevealLtk(a)@c & Honest(a)@c & c < i)
      & not (Ex #c1. RevealLtk(b)@c1 & Honest(b)@c1 & c1 < i)
      ==> (Ex #j. Running(b,a,<'P2','P1',<'D',r>>)@j
            & j < i
            & not (Ex a2 b2 #i2. Commit(a2,b2,<'P1','P2',<'D',r>>)@i2
            & not (#i2 = #i))
            )
          | (Ex X #k. RevealLtk(X)@k & Honest(X)@i)
        "

lemma injectiveagreement_P2_P1:
  " All a b r #i. Commit(a,b,<'P2','P1',<'D',r>>)@i
      & not (Ex #c. RevealLtk(a)@c & Honest(a)@c & c < i)
      & not (Ex #c1. RevealLtk(b)@c1 & Honest(b)@c1 & c1 < i)
      ==> (Ex #j. Running(b,a,<'P2','P1',<'D',r>>)@j
            & j < i
            & not (Ex a2 b2 #i2. Commit(a2,b2,<'P1','P2',<'D',r>>)@i2
            & not (#i2 = #i))
            )
          | (Ex X #k. RevealLtk(X)@k & Honest(X)@i)
        "
/************************************/
/*         Secrecy Lemmas           */
/************************************/

//static key Secrecy
lemma longtermKeySecrecy:
  "
    not(
        Ex p1 k #i #j.
        StaticSecret(p1, k) @i
        & K(k) @j
        & not(Ex p #r. RevealLtk(p) @ r & Honest(p) @i )
      )
    "
//Ephemeral key Secrecy
lemma EphemeralKeySecrecy:
  "
    not(
        Ex p1 k #i #j.
        EphSecret(p1, k) @i
        & K(k) @j
        & not(Ex p #r. RevealEphk(p) @ r & Honest(p) @i & i < r )

        )
      "
//Forward secrecy, aims to verify the secrecy of past communication
lemma forwardSecrecy:
  " All d #i. JuliaSecrect(d) @i
      ==> not (Ex #j. K(d)@j)
            | (Ex B #r. RevealLtk(B)@r & Honest(B) @i
                  & r < i)
    "

//Backward secrecy, aims to verify the secrecy of future communication
lemma backwardsecrecy:
  "
    All d #i. JuliaSecrect(d) @i
      ==> not (Ex #j. K(d)@j)
          | (Ex B #r. RevealLtk(B)@r & Honest(B) @i
            & i < r)
    "

end
